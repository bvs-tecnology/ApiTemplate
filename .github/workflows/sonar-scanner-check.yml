name: SonarQube scan check

on:
  pull_request:
    branches:
      - development
      - main

jobs:  
  build:
    name: Build from documentation
    runs-on:
      - windows
      - self-hosted
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 1.17
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~\.sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"example" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ vars.SONAR_HOST_URL }}"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
  
#  sonar:
#    runs-on:
#      - self-hosted
#      - windows
#
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#          
#      - name: Setup .NET
#        uses: actions/setup-dotnet@v4
#        with:
#          dotnet-version: '9.0.x'
#          
#      - name: Setup SonarScanner
#        run: dotnet tool install --global dotnet-sonarscanner
#
#      - name: Setup .Net Coverage
#        run: dotnet tool install --global dotnet-coverage
#        
#      - name: SonarQube Scan
#        shell: cmd
#        run: |
#          set PATH=%PATH%;%USERPROFILE%\.dotnet\tools
#          
#          dotnet sonarscanner begin ^
#            /k:"${{ vars.SONAR_API_KEY }}" ^
#            /d:sonar.host.url="${{ vars.SONAR_HOST_URL }}" ^
#            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" ^
#            /d:sonar.cs.vscoveragexml.reportsPaths="coverage.xml"
#          
#          dotnet build --no-incremental
#          dotnet-coverage collect "dotnet test" -f xml -o "coverage.xml"
#          
#          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
#        
#      - name: SonarQube Quality Gate check
#        shell: powershell
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
#        run: |
#          # === Lê o ceTaskId do arquivo report-task.txt ===
#          $report = Get-Content ".sonarqube\out\.sonar\report-task.txt" | ForEach-Object {
#            $kv = $_ -split "="
#            if ($kv.Length -eq 2) { @{ Key=$kv[0]; Value=$kv[1] } }
#          } | Group-Object Key -AsHashTable -AsString
#          
#          $ceTaskId = $report["ceTaskId"].Value
#          Write-Host "SonarQube ceTaskId: $ceTaskId"
#          
#          # === Tenta obter analysisId até 10 vezes ===
#          $analysisId = $null
#          $retries = 0
#          while (-not $analysisId -and $retries -lt 10) {
#            $resp = Invoke-RestMethod -Uri "$env:SONAR_HOST_URL/api/ce/task?id=$ceTaskId" -Headers @{ Authorization = "Bearer $env:SONAR_TOKEN" }
#            $analysisId = $resp.task.analysisId
#            if (-not $analysisId) {
#              $retries++
#              Write-Host "AnalysisId ainda não disponível... aguardando 5 segundos (tentativa $retries)"
#              Start-Sleep -Seconds 5
#            }
#          }
#          
#          if (-not $analysisId) {
#            Write-Error "AnalysisId não encontrado após $retries tentativas"
#            exit 1
#          }
#          
#          Write-Host "SonarQube analysisId: $analysisId"
#          
#          # === Consulta status do Quality Gate (aguarda até sair de IN_PROGRESS) ===
#          $status = "IN_PROGRESS"
#          $qgRetries = 0
#          while ($status -eq "IN_PROGRESS" -and $qgRetries -lt 20) {
#            $resp = Invoke-RestMethod -Uri "$env:SONAR_HOST_URL/api/qualitygates/project_status?analysisId=$analysisId" -Headers @{ Authorization = "Bearer $env:SONAR_TOKEN" }
#            $status = $resp.projectStatus.status
#            Write-Host "Quality Gate status: $status"
#            if ($status -eq "IN_PROGRESS") {
#              $qgRetries++
#              Start-Sleep -Seconds 5
#            }
#          }
#          
#          if ($status -ne "OK") {
#            Write-Error "Quality Gate failed with status $status"
#            exit 1
#          }
#          
#          Write-Host "Quality Gate passed!"