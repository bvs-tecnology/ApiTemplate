name: SonarQube scan check

on:
  pull_request:
    branches:
      - development
      - main

jobs:  
  sonar:
    runs-on:
      - self-hosted
      - windows

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          
      - name: Setup SonarScanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Setup .Net Coverage
        run: dotnet tool install --global dotnet-coverage
        
      - name: SonarQube Scan
        shell: cmd
        run: |
          set PATH=%PATH%;%USERPROFILE%\.dotnet\tools
          
          dotnet sonarscanner begin ^
            /k:"${{ vars.SONAR_API_KEY }}" ^
            /d:sonar.host.url="${{ vars.SONAR_HOST_URL }}" ^
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" ^
            /d:sonar.cs.vscoveragexml.reportsPaths="coverage.xml"
          
          dotnet build --no-incremental
          dotnet-coverage collect "dotnet test" -f xml -o "coverage.xml"
          
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        
      - name: SonarQube Quality Gate check
        shell: cmd
        run: |
          Start-Sleep -Seconds 15

          $reportFile = ".\.sonarqube\out\.sonar\report-task.txt"
          $reportContent = Get-Content $reportFile -Raw | ConvertFrom-StringData
          $ceTaskUrl = $reportContent.ceTaskUrl
               
          $headers = @{
            "Authorization" = "Bearer ${{ secrets.SONAR_TOKEN }}"
          }

          $timeout = (Get-Date).AddMinutes(5)
          while ((Get-Date) -lt $timeout) {
            $taskResponse = Invoke-RestMethod -Uri $ceTaskUrl -Headers $headers
            $taskStatus = $taskResponse.task.status
            Write-Host "Status da an√°lise do SonarQube: $taskStatus"
            
            if ($taskStatus -ne "PENDING" -and $taskStatus -ne "IN_PROGRESS") {
              break
            }
            Start-Sleep -Seconds 10
          }
          
          $analysisId = $taskResponse.task.analysisId
          $qualityGateUrl = "${{ vars.SONAR_HOST_URL }}/api/qualitygates/project_status?analysisId=$analysisId"
          $qualityGateResponse = Invoke-RestMethod -Uri $qualityGateUrl -Headers $headers
          $qualityGateStatus = $qualityGateResponse.projectStatus.status
          
          Write-Host "Resultado do Quality Gate: $qualityGateStatus"
          
          if ($qualityGateStatus -ne "OK") {
            Write-Error "O Quality Gate falhou! Resultado: $qualityGateStatus"
            exit 1
          } else {
            Write-Host "O Quality Gate passou!"
          }